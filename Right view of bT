from collections import deque
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def append(l):
    if not l or l[0] == -1:
        return None
    root = Node(l[0])
    q = []
    q.append(root)
    i = 1
    while i < len(l):
        t = q.pop(0)
        if i < len(l) and l[i] != -1:
            t.left = Node(l[i])
            q.append(t.left)
        i += 1
        if i < len(l) and l[i] != -1:
            t.right = Node(l[i])
            q.append(t.right)
        i += 1
    return root

def rightView(root):
    if root is None:
        return

    q = deque()
    q.append(root)

    while q:
        n = len(q)
        for i in range(n):
            node = q.popleft()
            if i == n - 1:  
                print(node.data, end=" ")
            if node.left:
                q.append(node.left)
            if node.right:
                q.append(node.right)

l = [int(i) for i in input().split()]
root = append(l)
rightView(root)
