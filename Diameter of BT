Diameter of a Binary Tree


Write a program to find the diameter of a binary tree.

The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes.

The diagram below shows two trees each with diameter nine, the leaves that form the ends of the longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). 


Input Format :

The tree is given as space separated integers indicating nodes of tree.

Every (2*i)th element of the integers denotes left child of node i.

Every (2*i +1)th element of the integers denotes right child of node i.

Stop the tree on encountering -1.


Output Format :

Print the diameter of the tree.



Example 1:

Input:

1 2 3 4 5 -1

Output:

4

Explanation:

The tree is as shown below, for this tree the diameter is 4.
======================================================================================
class node:
  def __init__(self,data):
    self.data=data
    self.left=None
    self.right=None
def append(l):
  q =[]
  if(l[0]!=-1):
    root = node(l[0])
    q.append(root)
  i = 1
  while(True):
    T = q.pop(0)
    if(i < len(l)-1):
      nn = node(l[i])
      T.left = nn
      q.append(nn)
    i += 1
    if(i < len(l)-1):
      nn = node(l[i])
      T.right = nn
      q.append(nn)
    else:
      break 
    i +=1
  return root
def hight(root):
  if root == None:
    return 0
  return (1 + max(hight(root.left) , hight(root.right)))
def deli(root):
  if root == None:
    return 0
  lh = hight(root.left)
  rh = hight(root.right)
  ld = deli(root.left)
  rd = deli(root.right)
  return max(lh + rh ,max(ld,rd))
l = [int(i) for i in input().split()]
root = append(l)
print(deli(root)+1)
