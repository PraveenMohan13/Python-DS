For a given Binary Tree of type integer, print all the nodes without any siblings.


Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Constraints

1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.
Time Limit: 1 second
Output Format

The only line of output prints the node data in a top to down fashion with reference to the root.
Node data in the left subtree will be printed first and then the right subtree.
A single space will separate them all.
Sample Input 0

5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 0

9
Sample Input 1

2 4 5 6 -1 -1 7 20 30 80 90 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1

6 7
=============================================================================================================
class node:
  def __init__(self,data):
    self.data = data
    self.left = None
    self.right = None
class tree:
  def append(self,l):
    q = []
    if(l[0] != -1):
      root = node(l[0])
      q.append(root)
    i = 1
    while(len(q)):
      T = q.pop(0)
      if(l[i]!=-1):
        nn = node(l[i])
        T.left = nn
        q.append(nn)
      i += 1
      if(l[i]!=-1):
        nn = node(l[i])
        T.right = nn
        q.append(nn)
      i += 1
    return root
  def sib(self,root):
    if(root == None):
      return
    if root.left == None and root.right != None:
      print(root.right.data,end = " ")
    if root.right ==None and root.left != None:
      print(root.left.data,end = " ")
    self.sib(root.left)
    self.sib(root.right)
l = [int(i) for i in input().split()]
z = tree()
root = z.append(l)
z.sib(root)
