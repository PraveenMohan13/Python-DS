Print adjacency list
Given the number of edges 'E' and vertices 'V' of a bidirectional graph. Your task is to build a graph through the adjacency list and print the adjacency list for each vertex.



Format:

Input:

The first line of input is T denoting the number of test cases. Then the first line of each test case contains two positive integers V and E. Where 'V' is the number of vertexes and 'E' is the number of edges in a graph. Next, the 'E' line contains two positive numbers showing that there is an edge between this two vertex.

Output:

For each vertex, print their connected nodes in the order you are pushing them inside the list. See the given example.



Constraints:

1 <= T <= 200

1 <= V <= 103

1 <= E <= V*(V-1)



Example:

Input:

2

5 7

0 1

0 4

1 2

1 3

1 4

2 3

3 4

3 3

0 1

1 2

2 0

Output:

0-> 1-> 4

1-> 0-> 2-> 3-> 4

2-> 1-> 3

3-> 1-> 2-> 4

4-> 0-> 1-> 3

0-> 1-> 2

1-> 0-> 2

2-> 1-> 0

Explanation:

Testcase 1: Given graph has 5 nodes and 7 edges. After creating adjacency list of given graph, we have created a list:

0-> 1-> 4

1-> 0-> 2-> 3-> 4

2-> 1-> 3

3-> 1-> 2-> 4

4-> 0-> 1-> 3


====================================================================================================
tc = int(input())
for i in range(tc):
    
    node, edge = input().split()
    l = [list() for x in range(int(node))]
    for e in range(int(edge)):
        s, e = input().split()
        l[int(s)].append(e)
        l[int(e)].append(s)
    for node, edge in enumerate(l):
        s = str(node)
        if len(edge) > 0:
            s += '-> ' + '-> '.join(edge)
        print(s)
